License
-------

  CGIplus Copyright (C) 2011 Rafael Dantas Justo

  This file is part of CGIplus.

  CGIplus is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  CGIplus is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with CGIplus.  If not, see <http://www.gnu.org/licenses/>.

Project
-------

  The CGIplus was created in July, 2011 as an auxiliary tool for a
  bigger project. The purpose is to abstract all CGI requests and
  facilitate the build of a webpage from server-side.

  C++ is far away from being the perfect solution for web
  applications, but in the back-end you will find many advantages in
  performance. And for those who have programmed for years in C++,
  CGIplus is a fast solution compared to other programming languages
  and their giant web frameworks.

  This document describes this tool behavior in many situations with
  examples. Feel free to send comments, suggestions and fixes.

How It Works?
-------------

  Just take a look in RFC 3875. For now CGIplus only read 6 of 17
  enviroment variables.

  ---------                    ----------                           ---------
 |         |   HTTP Request   |          |  Enviroment Variables   |         |
 | Browser | ---------------> |  Apache  | ----------------------> | CGIplus |
 |         |                  |          |  CONTENT_LENGTH         |         |
  ---------                    ----------   CONTENT_TYPE            ---------
                                            QUERY_STRING
                                            HTTP_COOKIE
                                            REMOTE_ADDR
                                            REQUEST_METHOD

Features
--------

   1. Cgi class

     * The Cgi class is who does all the hard work, parsing the
       request sent by HTTP server. When you instantiate a Cgi, the
       GET or POST requests are already parsed and stored into his
       internal structures.

     * Every time that you call "readInputs" method, all the current
       fields that were stored previously are removed before a new
       parse. By the way the "readInputs" method is the one that is
       called by the constructor to parse and store all the request
       data.

     * If in the request you find more than one field with the same
       name, the tool is going to store the last value.

     * The tool supports GET, POST and Cookie in CGI requests. To get
       field's values use the [] operator, and for a cookie's values
       you can use the () operator.

     * All requests are have their special symbols decoded according
       to RFC 3986 <http://www.ietf.org/rfc/rfc3986.txt>. Other
       symbols used for javascript and mysql injection are also
       removed, avoiding cross-site scripting and database attacks.

     * The client IP address is also stored, you can retrieve it with
       the method "getRemoteAddress".

   2. Builder class

     * After parsing all the data, you can think: "Okay, now that I
       got the data and processed everything, how I will put all this
       information on client screen?!?". The Builder class is your
       solution!  Just build a template with everything that is static
       in your "post back" page and set tags on variable html
       parts. There is no magic in these class, just an easy interface
       for a query/replace feature.

     * Using Builder you can easily set tags with [] operator and
       cookies using () operator with the Cookie object.

     * To use the builder you should set a template or give the file
       path where to the location of the template. For file paths that
       fails to load, the builder will store an empty string.

     * The tags are removed only when you call clear or clearFields
       methods. And the cookies are removed only when you call clear
       or clearCookies methods.

     * The default tag delimiter is <!-- TAG -->, where you replace
       the word TAG with your key target. If you want to change it,
       just call the method setTags and inform the beginning part
       ("<!-- ") and the end part (" -->").

     * You can also set the output format (TEXT or HTML) that will be
       described in the html header. By default is HTML.

     * Finally to parse your tags with the given template just call
       the show method. This method will return a screen that you can
       just print it in standard output.

   3. Some additional information

     * This tool do not throw exceptions, if any error occurs it just
       ignores it and move on. The main purpose of this is that you do
       not want to worry about your tool errors, you just need to
       focus in your application.
